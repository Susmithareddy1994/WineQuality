# -*- coding: utf-8 -*-
"""Wine Quality.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ysh9S_gi0fQm6crXRIj12_satq7ulyc
"""

# Import Libraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.model_selection import GridSearchCV

"""Data Import"""

#Reading the csv Dataset into data Frame using pandas and storing in the variable name df
df = pd.read_csv("/content/winequality-white.csv").dropna()
df.head()
df.columns

#Target values
df['quality'].value_counts()

"""Data Pre-processing"""

X = df.drop('quality', axis=1)
y = df['quality']

"""Data Validation"""

X_train,X_test,Y_train,Y_test = train_test_split(X,y,random_state= 2,test_size= 0.30)

X_train.shape,X_test.shape,Y_train.shape,Y_test.shape

"""Normalizing the Data using Standard Scaler"""

from sklearn.preprocessing import StandardScaler
std=StandardScaler()
scaler = std.fit(X_train)
X_train_scaled = scaler.transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""Using MLP Classifier Model"""

Clf = MLPClassifier(hidden_layer_sizes=(150,100,50),max_iter =200,activation ="relu" ,solver = 'adam')
Clf.fit(X_train_scaled,Y_train)
pred = Clf.predict(X_test_scaled)
print(accuracy_score(Y_test,pred)) 
print(classification_report(Y_test,pred))
print(confusion_matrix(Y_test,pred))

"""Hyper parameter Tuning"""

param_grid = {'hidden_layer_sizes': [(150,100,50)],'activation': ['relu'],'solver': ['adam'],'alpha': [0.05], 'learning_rate': ['adaptive'],}
grid = GridSearchCV(Clf, param_grid,n_jobs = -1,cv=2)
grid.fit(X_train_scaled, Y_train)
print(grid.best_params_) 
grid_predictions = grid.predict(X_test_scaled) 
print(accuracy_score(Y_test,grid_predictions))

"""Logisitic Regression Model"""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train_scaled,Y_train)
prediction = model.predict(X_test_scaled)
print(accuracy_score(Y_test,prediction))
print(classification_report(Y_test,prediction))
print(confusion_matrix(Y_test,prediction))

"""Support Vector Machine(SVM) Classifier model"""

from sklearn import svm

model_1 = svm.SVC(kernel = "linear")
model_1.fit(X_train_scaled,Y_train)
preds = model_1.predict(X_test_scaled)
print(accuracy_score(Y_test,preds))
print(classification_report(Y_test,preds))
print(confusion_matrix(Y_test,preds))

"""Accuracy is high for MLP Classifier next Logistic Regression and SVM"""